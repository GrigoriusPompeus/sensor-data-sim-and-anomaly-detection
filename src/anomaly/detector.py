"""
Base anomaly detection classes and alert system.
"""

from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import List, Dict, Any, Optional
from abc import ABC, abstractmethod

from ..sensors.base_sensor import SensorReading


class AlertSeverity(Enum):
    """Alert severity levels."""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class Alert:
    """Represents an anomaly alert."""
    timestamp: datetime
    sensor_id: str
    sensor_type: str
    rule_name: str
    severity: AlertSeverity
    value: float
    threshold: Optional[float]
    message: str
    metadata: Dict[str, Any]

    def to_dict(self) -> Dict[str, Any]:
        """Convert alert to dictionary for JSON serialisation."""
        return {
            'timestamp': self.timestamp.isoformat(),
            'sensor_id': self.sensor_id,
            'sensor_type': self.sensor_type,
            'rule_name': self.rule_name,
            'severity': self.severity.value,
            'value': self.value,
            'threshold': self.threshold,
            'message': self.message,
            'metadata': self.metadata
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Alert':
        """Create alert from dictionary."""
        return cls(
            timestamp=datetime.fromisoformat(data['timestamp']),
            sensor_id=data['sensor_id'],
            sensor_type=data['sensor_type'],
            rule_name=data['rule_name'],
            severity=AlertSeverity(data['severity']),
            value=data['value'],
            threshold=data.get('threshold'),
            message=data['message'],
            metadata=data.get('metadata', {})
        )


class AnomalyDetector(ABC):
    """Base class for anomaly detection algorithms."""
    
    def __init__(self, name: str):
        self.name = name
        self.alerts: List[Alert] = []
    
    @abstractmethod
    def process_reading(self, reading: SensorReading) -> List[Alert]:
        """Process a sensor reading and return any alerts."""
        pass
    
    def reset(self):
        """Reset detector state."""
        self.alerts.clear()
    
    def get_alerts(self) -> List[Alert]:
        """Get all alerts generated by this detector."""
        return self.alerts.copy()


class AlertManager:
    """Manages multiple anomaly detectors and consolidates alerts."""
    
    def __init__(self):
        self.detectors: List[AnomalyDetector] = []
        self.all_alerts: List[Alert] = []
    
    def add_detector(self, detector: AnomalyDetector):
        """Add an anomaly detector."""
        self.detectors.append(detector)
    
    def process_reading(self, reading: SensorReading) -> List[Alert]:
        """Process reading through all detectors."""
        new_alerts = []
        for detector in self.detectors:
            alerts = detector.process_reading(reading)
            new_alerts.extend(alerts)
            detector.alerts.extend(alerts)
        
        self.all_alerts.extend(new_alerts)
        return new_alerts
    
    def get_all_alerts(self) -> List[Alert]:
        """Get all alerts from all detectors."""
        return self.all_alerts.copy()
    
    def reset(self):
        """Reset all detectors and clear alerts."""
        for detector in self.detectors:
            detector.reset()
        self.all_alerts.clear()
